{"name":"Log2iptables","tagline":"automatically creates iptables rules from logfile","body":"# log2iptables 1.6\r\nlog2iptables is a Bash script that parse a log file and execute iptables command. Useful for automatically block an IP address against bruteforce or port scan activities.\r\n\r\nBy a simple regular expression match, you can parse any logfile type and take an action on iptables. For example, with log2iptables you can: Search for all logs in /var/log/myssh.log that match \"Failed password.* ([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)\" more that 5 times, and then block the ipaddress with iptables with action DROP.\r\n\r\nWhy a Bash script?\r\n> simple is better. no deps, no installation, no fucking boring things. just run it in crontab :)\r\n\r\n\r\n## Index\r\n- [Usage](#usage)\r\n- [Examples](#examples)\r\n- [Drop SSH Bruteforce](#automaitc-drop-ssh-bruteforce)\r\n- [Drop Nmap Port Scan](#automatic-drop-nmap-scan)\r\n- [Drop Bot/Scan reading Nginx logs](#nginx-drop-scan--bot)\r\n- [Crontab](#crontab)\r\n- [Execute command](#execute-command-after-iptables-run)\r\n- [Notify via HTTP](#send-notification-via-http-post)\r\n- [Use Telegram](#use-telegram-bot)\r\n- [TODO](#todo)\r\n- [Contact](#contact)\r\n\r\n\r\n## Usage\r\n```\r\n./log2iptables -h\r\n```\r\n- `-f `  Log file to read (default: `/var/log/auth.log`)\r\n- `-r `  Regular Expression (ex: `\"(F|f)ail.*([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)\"`)\r\n- `-p `  IP Address group number (on example regex before: 2)\r\n- `-l `  How many times the regex must match (default: 5)\r\n- `-x `  Execute IPTables command 1=enable 0=disable (default: 1)\r\n- `-a `  IPTables Action (`the iptables -j argument, default: DROP`)\r\n- `-i `  IPTables insert (I) or append (A) mode (default: I)\r\n- `-c `  IPTables chain like INPUT, OUTPUT, etc... (default: INPUT)\r\n- **System Functions:**\r\n- `-X `  Execute command after add new iptables rules (default: 0)\r\n- **HTTP Functions:**\r\n- `-u `  Enable send HTTP POST request with all ip found 1=on 0=off (default: 0)\r\n- `-U `  Destination URL (example: `http://myserver/myscript.php`)\r\n- `-H `  Header parameters to send with curl (optional)\r\n- **Telegram Functions:**\r\n- `-t `  Send Telegram msg on iptables command 0=off, 1=on (default: 0)\r\n- `-T `  Set Telegram bot Token\r\n- `-C `  Set Telegram Chat ID\r\n\r\n\r\n## Examples\r\n\r\n\r\n### Automaitc drop SSH Bruteforce\r\ni use this script for automatic response against SSH bruteforce, and for block Nmap SYN/TCP scan. The first example relates SSH logs, with a regular expression that search for failed login:\r\n```\r\n./log2iptables.sh -x 1 -f /var/log/auth.log -r \"sshd.*(f|F)ail.*(\\=| )([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\" -p 3 -l 5\r\n\r\nReading log file: /var/log/auth.log\r\nUsing regex: sshd.*(f|F)ail.*(\\=| )([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\r\nIP Address group position: 3\r\nSet limit match to: 5\r\n\r\n[Found] 59.188.247.119 more then 5 times (4393 match)\r\n`-- [Check] if 59.188.247.119 already exists in iptables...\r\n   `-- [Add ] Add IP 59.188.247.119 to iptables (-j DROP)\r\n\r\n1 New IP Address(es) added to iptables:\r\n+\r\n| 59.188.247.119    \r\n+\r\nDone.\r\n```\r\n\r\nIf you neet to test the script, or the regular expression, without add any rules to iptables, you can run log2iptables with the `-x 0` argument:\r\n```\r\n./log2iptables.sh -x 0 -f /var/log/auth.log -r \"sshd.*(f|F)ail.*(\\=| )([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\" -p 3 -l 5\r\n```\r\nwith `-x 0` argument, log2iptables will **not** run the iptables command.\r\n\r\n\r\n\r\n\r\n### Automatic drop Nmap Scan\r\nFor automatic drop Nmap SYN scan, i've configured my iptables with the following rule:\r\n```\r\niptables -I INPUT -p tcp -m multiport --dports 23,79 -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG SYN -m limit --limit 3/min -j LOG --log-prefix \"PortScan SYN>\"\r\n```\r\n\r\nin my environment, this rule write a log in /var/log/syslog every time someone scan my server (something like: nmap -sS myserver). I've put in crontab log2iptables with the following arguments:\r\n```\r\n./log2iptables.sh -x 1 -f /var/log/syslog -r \"PortScan.*SRC\\=([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)\" -p 1 -l 1\r\n\r\nReading log file: /var/log/syslog\r\nUsing regex: PortScan.*SRC\\=([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)\r\nIP Address group position: 1\r\nSet limit match to: 1\r\n\r\n[Found] 61.239.124.78 more then 1 times (1 match)\r\n`-- [Check] if 61.239.124.78 already exists in iptables...\r\n   `-- [Add ] Add IP 61.239.124.78 to iptables (-j DROP)\r\n[Found] 112.233.174.61 more then 1 times (1 match)\r\n`-- [Check] if 112.233.174.61 already exists in iptables...\r\n   `-- [Add ] Add IP 112.233.174.61 to iptables (-j DROP)\r\n[Found] 112.134.246.185 more then 1 times (1 match)\r\n`-- [Check] if 112.134.246.185 already exists in iptables...\r\n   `-- [Add ] Add IP 112.134.246.185 to iptables (-j DROP)\r\n[Found] 220.75.203.9 more then 1 times (1 match)\r\n`-- [Check] if 220.75.203.9 already exists in iptables...\r\n   `-- [Add ] Add IP 220.75.203.9 to iptables (-j DROP)\r\n[Found] 101.30.131.78 more then 1 times (1 match)\r\n`-- [Check] if 101.30.131.78 already exists in iptables...\r\n   `-- [Add ] Add IP 101.30.131.78 to iptables (-j DROP)\r\n[Found] 121.189.181.61 more then 1 times (1 match)\r\n`-- [Check] if 121.189.181.61 already exists in iptables...\r\n   `-- [Add ] Add IP 121.189.181.61 to iptables (-j DROP)\r\n[Found] 110.248.230.43 more then 1 times (1 match)\r\n`-- [Check] if 110.248.230.43 already exists in iptables...\r\n   `-- [Add ] Add IP 110.248.230.43 to iptables (-j DROP)\r\n[Found] 46.161.40.37 more then 1 times (3 match)\r\n`-- [Check] if 46.161.40.37 already exists in iptables...\r\n   `-- [Add ] Add IP 46.161.40.37 to iptables (-j DROP)\r\n[Found] 182.70.50.47 more then 1 times (2 match)\r\n`-- [Check] if 182.70.50.47 already exists in iptables...\r\n   `-- [Add ] Add IP 182.70.50.47 to iptables (-j DROP)\r\n[Found] 186.153.198.202 more then 1 times (1 match)\r\n`-- [Check] if 186.153.198.202 already exists in iptables...\r\n   `-- [Add ] Add IP 186.153.198.202 to iptables (-j DROP)\r\n[Found] 113.124.167.80 more then 1 times (1 match)\r\n`-- [Check] if 113.124.167.80 already exists in iptables...\r\n   `-- [Add ] Add IP 113.124.167.80 to iptables (-j DROP)\r\n...omitted for more clarity...\r\n\r\n\r\n73 New IP Address(es) added to iptables:\r\n+\r\n| 112.233.174.61     | 61.239.124.78      | 220.75.203.9\r\n| 112.134.246.185    | 121.189.181.61     | 101.30.131.78\r\n| 182.70.50.47       | 46.161.40.37       | 110.248.230.43\r\n| 186.153.198.202    | 72.188.204.15      | 113.124.167.80\r\n| 87.255.94.110      | 188.95.110.120     | 80.82.64.127\r\n| 119.246.121.168    | 171.91.240.152     | 119.204.220.229\r\n| 106.35.64.185      | 39.79.196.94       | 189.102.68.52\r\n| 220.123.188.21     | 110.243.213.174    | 80.85.120.83\r\n| 41.203.234.100     | 115.45.184.50      | 220.174.115.92\r\n| 113.174.105.113    | 124.106.19.90      | 101.72.27.166\r\n| 121.27.163.6       | 121.236.182.73     | 101.160.155.95\r\n| 112.101.149.40     | 222.132.23.141     | 81.225.106.161\r\n| 119.141.235.202    | 210.50.232.120     | 87.223.108.183\r\n| 120.8.171.42       | 202.44.234.114     | 110.240.228.180\r\n| 85.100.6.242       | 116.10.8.50        | 117.56.165.83\r\n| 218.214.55.126     | 113.79.70.230      | 114.44.228.122\r\n| 124.244.79.230     | 39.69.24.96        | 110.172.27.188\r\n| 169.45.161.177     | 218.159.0.38       | 180.177.169.116\r\n| 59.16.116.92       | 95.235.73.99       | 110.247.216.169\r\n| 219.74.183.157     | 222.218.95.151     | 177.75.44.241\r\n| 178.153.52.213     | 112.234.194.243    | 93.92.199.103\r\n| 108.223.43.250     | 59.127.52.197      | 101.72.37.178\r\n| 115.54.145.2       | 5.149.203.81       | 41.41.245.224\r\n| 27.203.109.249     | 78.187.121.165     | 220.170.221.50\r\n| 178.130.35.92      \r\n+\r\nDone.\r\n```\r\nObviously, here the output is more verbose.\r\n\r\n\r\n\r\n### Nginx drop scan / bot\r\nEasy way to automatic drop bot or web scan, reading http access log.\r\nI've a nginx server that store all logs in `/usr/local/nginx/logs/example.com.access`.\r\nMy website is not a Drupal or Wordpress installation, but i receive daily requests for\r\npages like: wp-login, wp-admin, install.php, xmlrpc.php, etc... that does not exists (404).\r\nWith log2iptables i can drop it by runing:\r\n```\r\n./log2iptables.sh -x 1 -f /usr/local/nginx/logs/example.com.access -r \"([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+) .*GET \\/(wp\\-|admin|install|setup|xmlrpc).* 404 \" -p 1 -l 1\r\n```\r\n\r\n\r\n## Crontab\r\nI don't know which is the better way to run this script in crontab.\r\nAnyway, I've the following configuration:\r\n```\r\n*/5 * * * * /usr/local/bin/log2iptables.sh -x 1 -f /var/log/auth.log -r \"sshd.*(f|F)ail.*(\\=| )([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\" -p 3 -l 5 > /dev/null 2>&1\r\n*/1 * * * * /usr/local/bin/log2iptables.sh -x 1 -f /var/log/syslog -r \"PortScan.*SRC\\=([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)\" -p 1 -l 1 > /dev/null 2>&1\r\n```\r\n\r\n## Execute command after iptables run\r\nWhen log2iptables add new iptables rules, can execute a command.\r\nYou can specify the command with argument -X and you can choose\r\nhow to format the ip address list using IPLISTCSV or IPLIST PIPE.\r\nFor example:\r\n```\r\n./log2iptables.sh -f /var/log/messages -r \"PortScan.*SRC\\=([0-9\\.]+)\" -p 1 -X \"echo IPLISTCSV\"\r\n```\r\nexecute the command \"echo\" and the string IPLISTCSV will be replaced\r\nwith all ip addresses added on iptables. the output is:\r\n```\r\n...\r\n\r\n3 New IP Address(es) added to iptables:\r\n+\r\n| 83.103.171.94    | 46.161.40.37    | 95.213.143.180\r\n+\r\n\r\nExecuting Command: echo IPLISTCSV\r\n+\r\n83.103.171.94,46.161.40.37,95.213.143.180\r\n+\r\n\r\nDone.\r\n```\r\nThis is useful if you have to send this information to others applications\r\nlike IPS or Firewall API, WAF API, etc...\r\n\r\n\r\n## Send notification via HTTP POST\r\nYou can enable the HTTP POST function that send all ip addresses found to a specific URL with a POST request using curl. For example:\r\n```\r\n./log2iptables.sh -f /var/log/auth.log.2 -u 1 -U \"http://www.mywebsite.com/log2ip.php\"\r\n```\r\nthis PHP script will receive a POST request with the following parameters:\r\n```php\r\nprint_r($_POST);\r\n\r\nArray (\r\n\t[ipaddresses] = '10.2.3.4, 10.5.6.7, 10.8.9.10',\r\n\t[logfile] = '/var/log/auth.log',\r\n\t[system] = 'mylocalhost.domain'\r\n)\r\n```\r\n\r\n## Use Telegram Bot\r\nNow you can send a text message to your phone, using Telegram, when log2iptables execute the iptables command. This is possible by using the Telegram Bot API. For more information see https://core.telegram.org/bots/api or this useful tutorial http://unnikked.ga/getting-started-with-telegram-bots/ on how to get a bot Token.\r\n\r\nAnyway, i've created a new Telegram Bot just visiting https://telegram.me/botfather and then i've open a chat with my bot. Then i've get the Chat ID with curl, like this:\r\n```\r\ncurl \"https://api.telegram.org/bot<token>/getUpdates\"\r\n\r\n{\"ok\":true,\"result\":[{\"update_id\":xxxxx,\r\n\"message\":{\"message_id\":1,\"from\":{\"id\":xxxxx,\"first_name\":\"Andrea\",\"last_name\":\"Menin\",\"username\":\"theMiddle\"},\"chat\":{\"id\":123456,\"first_name\":\"Andrea\",\"last_name\":\"Menin\",\"username\":\"theMiddle\",\"type\":\"private\"},\"date\":xxxxxxx,\"text\":\"\\/start\"}}]}\r\n```\r\nThe JSON output include my Chat ID: 123456 (fake) and i can use it for send text message from my bot, with something like this:\r\n```\r\ncurl -d \"text=hey Andrea... i am your father&chat_id=123456\" \"https://api.telegram.org/bot<token>/sendMessage\"\r\n```\r\n\r\n### Notify on iptables command execution using Telegram\r\nWhen log2iptables adds a rule on iptables, it can notify the event to your phone via Telegram.\r\nFor doing that, you need the -t 1, -T and -C arguments that means:\r\n- `-t 1       ` Active notification using Telegram\r\n- `-T <token> ` Set the Telegram Bot Token\r\n- `-C <chatid>` Set the Telegram Chat ID\r\n\r\nThe command will be something like the following:\r\n```\r\n./log2iptables.sh -x 1 -f /var/log/auth.log -r \"sshd.*(f|F)ail.*(\\=| )([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\" -p 3 -l 5 -t 1 -T \"myTokenBlablabla\" -C \"123456\"\r\n```\r\nthe result is:\r\n![screenshot](https://waf.blue/img/TelegramScreenshot.jpg)\r\n\r\n## TODO\r\n- 2015-11-15 `[high  ]` ~~Execute command on iptables rule add~~ done v1.6\r\n- 2015-11-11 `[high  ]` ~~Send Telegram notification (using telegram bot)~~ done v1.4\r\n- 2015-11-11 `[high  ]` ~~Set -x 0 as default~~ (tnx yuredd) done v1.5\r\n- 2015-11-11 `[medium]` Save iptables configuration and restore at boot (tnx yuredd)\r\n- 2015-11-10 `[medium]` ~~HTTP POST ip list to URL~~ done v1.5\r\n- 2015-11-09 `[high  ]` Send mail with log2iptables output\r\n- 2015-11-09 `[high  ]` Optional port and protocol on iptables command\r\n- 2015-11-09 `[low   ]` HTML Output\r\n\r\nall contribution are welcome :)\r\n\r\n## Contact\r\n```\r\nAndrea (aka theMiddle) Menin\r\nhttps://waf.blue\r\ntheMiddle@waf.blue\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}